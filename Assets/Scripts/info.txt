
-----------------------------------------------------------------------------------------------
2018重要修改，为了使数据编辑器支持输出不对等数据(eg:主动，被动技能，或者同一个模板的技能，有不同类型的属性)
做了重要改正，详见SQLiteHelper4DataEditor类的说明

-----------------------------------------------------------------------------------------------
编辑器基本结构说明2018.3.10

GEditorRoot是整个程序的入口，编辑器初始化在这里执行
持有TabContainer,TreeContainerDic,KVContainerDic
这里特别要注意下，目前的编辑器思路是tab，tree，kvcontainer是平级关系，而非相互包含,这就导致3个容器之间的一些相互操作要在GEditorRoot完成

GEditorEnum定位是放常量，目前是放了地址相关

GEditorConfig定位是存放自定义配置，目前放了不同数据模板的处理

-----------------------------------------------------------------------------------------------
编辑器比较重要的ui部分的生命周期说明
tab，tree，list
-----------------------------------------------------------------------------------------------
tab 
结构数据，editor关闭时保存，开始时读取一次赋值后不需要保存
内容数据，数据量比较小，直接写死在代码中，从代码中注册新编辑器(后期可以写到txt读表扩展编辑器tab)
-----------------------------------------------------------------------------------------------
tree
结构数据，tab关闭时保存，editor关闭时，保存没关闭tab的tree结构，开始时读取一次后就可以释放（原始数据），  
没有改动过的tree，不要多次保存tree结构，这需要在tree中做个flag机制判定是否有改动

内容数据，不同于tab，tree的内容数据包括在结构数据中，内容数据其实只有一个标示list内容的id
-----------------------------------------------------------------------------------------------

list
结构数据，来自模板类，所以相当是写死在代码中的(这个以后从txt读表扩展编辑器)
已经打开过的结构数据(prefab实例)都存起来不释放，方便快速切换

内容数据，来自sql，根据treeNode的内容节点ID查sql
关于内容数据的导入，导出说明，
每次新建kvitem时就会向sql插入一个数据，
每次打开一个kvitem如果查询本地dic没有这个数据，那么就去sql请求一条并存在本地
每次修改一条数据，立刻保存到sql
-----------------------------------------------------------------------------------------------

数据库的说明
数据库使用sqlite本地数据库，以后切换也可以只切换sql部分
使用长连接，关闭时再关闭数据库


-----------------------------------------------------------------------------------------------